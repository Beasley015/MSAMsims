}
ns<-do.call(rbind, nlist) #turn abundance vectors into abundance matrix
rowSums(ns) #total abundances
rotate.ns<-t(ns) #I might need an inverted matrix later
#Simulated observation process ------------------------------------------
some.det <- runif(n = specs-2, min = 0.4, max = 0.8)#simulate mean detection probs
#These are mid to high detection probabilities
no.det <- rep(0, 2)
#Two species will not be detected
mean.det <- c(some.det, mean.det)
beta0<-qlogis(mean.det) #put it on logit scale
#responses to detection covs would go here
logit.p<-beta0 #logit link function. Det covs go here
p <- plogis(logit.p) #Transform it back
#Simulate observation data
L<-list()
for(b in 1:specs){
y<-matrix(NA, ncol = K, nrow = J)
for(a in 1:K){
y[,a]<-rbinom(n = J, size = ns[b,], prob = p[b])
}
L[[b]]<-y
}
#I suppose I could make that a function but I'm lazy
#Smash it into array
obsdata<-array(as.numeric(unlist(L)), dim=c(J, K, specs))
#Smash it into array
obsdata<-array(as.numeric(unlist(L)), dim=c(J, K, specs-2))
mean.det <- c(some.det, no.det)
beta0<-qlogis(mean.det) #put it on logit scale
#responses to detection covs would go here
logit.p<-beta0 #logit link function. Det covs go here
p <- plogis(logit.p) #Transform it back
#Simulate observation data
L<-list()
for(b in 1:specs){
y<-matrix(NA, ncol = K, nrow = J)
for(a in 1:K){
y[,a]<-rbinom(n = J, size = ns[b,], prob = p[b])
}
L[[b]]<-y
}
#I suppose I could make that a function but I'm lazy
#Smash it into array
obsdata<-array(as.numeric(unlist(L)), dim=c(J, K, specs-2))
obsdat
obsdata
L[[12]]
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(tidyverse)
library(patchwork)
library(viridis)
library(metacom)
#Load abundance data
site.abund <-readRDS(file = "siteabund.rds")
#change column names
colnames(site.abund) <- c("Rank", "Estimated", "Observed", "True")
site.abund$Site <- seq(1:30)
#Put it into long format
site.abund %>%
gather(Estimated:True, key = "Source", value = "Abundance") %>%
{. ->> siteabund}
#Load data
truemamm <- readRDS(file = "truemamm.RDS")
truemamm <- as.data.frame(t(truemamm))
obsmamm <- readRDS(file = "obsdata.RDS")
maxobs <- as.data.frame(apply(obsmamm, c(1,3), max))
long.dat <- function(x){
x$Site <- seq(1:30)
x %>%
gather(V1:V10, key = "Species", value = "Abundance")
}
long.tru <- long.dat(truemamm)
long.obs <- long.dat(maxobs)
#Comparing true abundances with observed data and estimates from an MSAM
abund <- ggplot(data = siteabund, aes(x = Rank, y = Abundance, color = Source,
fill = Source))+
geom_point()+
geom_smooth(method = 'lm')+
scale_color_viridis_d()+
scale_fill_viridis_d()+
theme_bw(base_size = 20)+
theme(legend.title = element_blank())
print(abund)
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_raster()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle(label = "True Abundance")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
obs <- ggplot(data = long.obs, aes(x = Species, y = Site, fill = Abundance))+
geom_raster()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle(label = "Observed Abundance")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(axis.title.y = element_blank())
heatplots <- tru|obs
print(heatplots)
ggsave(filename = "abundplot.jpeg", plot = abund)
ggsave(filename = "abundheat.jpeg", plot = heatplots, dpi = 750,
width = 8, units = "in")
tru
obs
heatmap
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_raster()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
obs <- ggplot(data = long.obs, aes(x = Species, y = Site, fill = Abundance))+
geom_raster()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(axis.title.y = element_blank())
heatplots <- tru|obs
heatplots
heatplots <- tru|obs+plot_annotation(subtitle = "Observed")
heatplots <- tru+obs+plot_annotation(subtitle = "Observed")
heatplots
heatplots <- tru+obs
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
tru
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
ggtitle = "True"
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
ggtitle("True")
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none")
tru
heatplots <- tru+obs
heatplots
heatplots <- tru+obs+plot_annotation(subtitle = "True")
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none", plot.title = element_text(margin = 0))
tru
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none",
plot.title = element_text(margin = margin(0,0,0,0)))
tru
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
obs <- ggplot(data = long.obs, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(axis.title.y = element_blank())
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
tru
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
ggtitle("True")
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
ggtitle("True")+
coord_fixed(ratio = 0.25)+
theme_classic(base_size = 12)+
theme(legend.position = "none")
tru
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none")
heatplots <- tru+obs
heatplots
obs <- ggplot(data = long.obs, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("Observed")+
theme_classic(base_size = 12)+
theme(axis.title.y = element_blank())
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
coord_fixed(ratio = 0.25)+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none")
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ylim(0,30)+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none")
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none")
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none", axis.text.x = hjust = 1)
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
theme_classic(base_size = 12)+
theme(legend.position = "none", axis.text.x = element_text(hjust = 1))
tru
heatplots <- tru+obs
heatplots
#These heat maps will look stupid for now because data was simuleated w/out covs
#But with real data it will be interesting to see if species cluster
#at certain sites
tru <- ggplot(data = long.tru, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("True")+
scale_x_discrete(expand = c(0,0.1))+
theme_classic(base_size = 12)+
theme(legend.position = "none")
tru
heatplots <- tru+obs
heatplots
obs <- ggplot(data = long.obs, aes(x = Species, y = Site, fill = Abundance))+
geom_tile()+
scale_color_gradientn(colors = viridis_pal()(10), limits = c(0,16),
aesthetics = "fill")+
ggtitle("Observed")+
theme_classic(base_size = 12)+
scale_x_discrete(expand = c(0, 0.5))+
theme(axis.title.y = element_blank())
heatplots <- tru+obs
heatplots
ggsave(filename = "abundheat.jpeg", plot = heatplots, dpi = 750,
width = 8, units = "in")
###############################
# Simulated abundance data for evaluating multi-species abundance model.
# No covariates.
# Includes data augmentation to model species that were never detected during sampling.
###############################
#Setup -------------------------------------------------------------------------
library(vcdExtra)
library(vegan)
library(R2OpenBUGS)
library(abind)
setwd("c:/users/beasley/dropbox/MSAMsims")
set.seed(15) #ensures sim is same each time
#Prelim data: sites, survey, seed -----------------------------------------------
J <- 30 #sites
K <- 3 #surveys per site
specs<-12 #Number of species
Ks<-rep(K, J) #Ks is a vector of length J indicationg # of sampling periods per site
#simulated values for covs would go here
#Simulating abundance data --------------------------------------------------
mean.lambdas <- rlogseries(specs, 0.75)
#Draw lambdas from a logseries distribution
alpha0 <- log(mean.lambdas) #log-scale intercept
#abundance responses to any covariates would go here as alpha1, alpha2, etc
log.lambdas <- alpha0  #this is your log link function. add covs here
lambdas <- exp(log.lambdas)  #inverse link transformation
#most of these steps won't matter until covs are added
#create list of abundance vectors
nlist<-list()
for(a in 1:specs){
nlist[[a]] <- rpois(n = J, lambda = lambdas[a])
}
ns<-do.call(rbind, nlist) #turn abundance vectors into abundance matrix
rowSums(ns) #total abundances
rotate.ns<-t(ns) #I might need an inverted matrix later
#Simulated observation process ------------------------------------------
some.det <- runif(n = specs-2, min = 0.4, max = 0.8)#simulate mean detection probs
#These are mid to high detection probabilities
no.det <- rep(0, 2)
#Two species will not be detected
mean.det <- c(some.det, no.det)
beta0<-qlogis(mean.det) #put it on logit scale
#responses to detection covs would go here
logit.p<-beta0 #logit link function. Det covs go here
p <- plogis(logit.p) #Transform it back
#Simulate observation data
L<-list()
for(b in 1:specs){
y<-matrix(NA, ncol = K, nrow = J)
for(a in 1:K){
y[,a]<-rbinom(n = J, size = ns[b,], prob = p[b])
}
L[[b]]<-y
}
#I suppose I could make that a function but I'm lazy
#Smash it into array
obsdata<-array(as.numeric(unlist(L)), dim=c(J, K, specs-2))
#Nondetected species were removed from observation data
#Number of observed species
n <- specs-2
#Augment data with all-zero matrices
n.aug <- 3
augmats <- array(0, dim = c(J, K, n.aug))
augdata <- abind(obsdata, augmats, along = 3)
maxobs <- apply(augdata, c(1,3), max)
#Write model and send to Gibbs sampler ------------------------------------------
cat("
model{
#Define hyperprior distributions
omega ~ dunif(0,1)
a0.mean ~ dunif(0,1)
mu.a0 <- log(a0.mean)-log(1-a0.mean)
tau.a0 ~ dgamma(0.1, 0.1)
b0.mean ~ dunif(0,1)
mu.b0 <- log(b0.mean)-log(1-b0.mean)
tau.b0 ~ dgamma(0.1, 0.1)
for(i in 1:(n+n.aug)){
#create priors from distributions above
w[i] ~ dbern(omega)
#w[i] indicates whether or not species is exposed to sampling
a0[i] ~ dnorm(mu.a0, tau.a0)
b0[i] ~ dnorm(mu.b0, tau.b0)
#Loop within a loop to estimate abund of spec i at site j
for(j in 1:J){
lambda[j,i] <- exp(a0[i])
mu.lambda[j,i] <- lambda[j,i]*w[i]
Z[j,i] ~ dpois(mu.lambda[j,i])
#Z is the estimated abundance matrix
#Loop within loops for estimating det of spec i at site j at time k
for(k in 1:K[j]){
p[j,k,i] <- b0[i]
logit.p[j,k,i] <- 1 / (1 + exp(-p[j,k,i]))
obsdata[j,k,i] ~ dbin(logit.p[j,k,i], Z[j,i])
}
}
}
}
", file = "augmentsanscovs.txt")
#Compile data
datalist<-list(n = n, n.aug = n.aug, J=J, K=Ks, obsdata=augdata)
#Specify parameters to return to R
params<-list('Z','lambda','a0','b0', 'mu.a0', 'mu.b0', 'tau.a0', 'tau.b0')
#Generate initial values
init.values<-function(){
omega.guess <- runif(1,0,1)
lambda.guess <- runif(1,0,5)
list(omega = omega.guess,
w=c(rep(1,n), rbinom(n = n.aug,size=1,prob=omega.guess)),
a0 = rnorm(n = (n+n.aug), mean = mean(alpha0)),
b0 = rnorm(n = (n+n.aug), mean = runif(1,0,1)),
Z = maxobs
)
}
augmodel2 <- bugs(model.file = "augmentsanscovs.txt", data = datalist, n.chains = 3,
parameters.to.save = params, inits = init.values, n.burnin = 3000,
n.iter = 5000, debug = T)
augmodel2
augmodel <- bugs(model.file = "augmentsanscovs.txt", data = datalist, n.chains = 3,
parameters.to.save = params, inits = init.values, n.burnin = 5000,
n.iter = 7000, debug = T)
augmodel
augmodel <- bugs(model.file = "augmentsanscovs.txt", data = datalist, n.chains = 3,
parameters.to.save = params, inits = init.values, n.burnin = 4000,
n.iter = 7000, debug = T)
augmodel
augmodel <- bugs(model.file = "augmentsanscovs.txt", data = datalist, n.chains = 3,
parameters.to.save = params, inits = init.values, n.burnin = 4000,
n.iter = 6000, debug = T)
setwd("c:/users/beasley/dropbox/MSAMsims")
saveRDS(augmodel, file = "augsanscovs.RDS")
